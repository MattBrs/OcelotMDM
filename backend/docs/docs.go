// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/devices": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "show a filtered list of the devices previously enrolled",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "devices"
                ],
                "summary": "show a filtered list of the devices",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Device Status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Device Name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Device Architecture",
                        "name": "architecture",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_MattBrs_OcelotMDM_internal_domain_device.Device"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "enroll device",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "devices"
                ],
                "summary": "enroll a new device to the network",
                "parameters": [
                    {
                        "description": "Device Data",
                        "name": "device",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_MattBrs_OcelotMDM_internal_api_dto_device_dto.DeviceCreationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_MattBrs_OcelotMDM_internal_api_dto_device_dto.DeviceCreationResponse"
                        }
                    }
                }
            }
        },
        "/devices/updateAddress": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "update known device ip address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "devices"
                ],
                "summary": "update device address",
                "parameters": [
                    {
                        "description": "Device New address",
                        "name": "device",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_MattBrs_OcelotMDM_internal_api_dto_device_dto.UpdateAddressRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_MattBrs_OcelotMDM_internal_api_dto_device_dto.DeviceCreationResponse"
                        }
                    }
                }
            }
        },
        "/token/generate": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "generates an OTP to be used for some operations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "token"
                ],
                "summary": "Generates OTP",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_MattBrs_OcelotMDM_internal_api_dto_token_dto.NewTokenResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_MattBrs_OcelotMDM_internal_api_dto_token_dto.NewTokenResponseErr"
                        }
                    }
                }
            }
        },
        "/user/create": {
            "post": {
                "description": "Create a new user account with username and password. Default disabled",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create a new User account",
                "parameters": [
                    {
                        "description": "User account",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_MattBrs_OcelotMDM_internal_api_dto_user_dto.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_MattBrs_OcelotMDM_internal_api_dto_user_dto.CreateUserResponse"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Lets a user login with his credentials to obtain a JWT token to use in other API calls",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Login a User account. Provides JWT",
                "parameters": [
                    {
                        "description": "User account",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_MattBrs_OcelotMDM_internal_api_dto_user_dto.LoginUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_MattBrs_OcelotMDM_internal_api_dto_user_dto.LoginUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_MattBrs_OcelotMDM_internal_api_dto_user_dto.LoginUserResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_MattBrs_OcelotMDM_internal_api_dto_user_dto.LoginUserResponse"
                        }
                    }
                }
            }
        },
        "/user/update/enabled": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Lets a user login with his credentials to obtain a JWT token to use in other API calls",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Login a User account. Provides JWT",
                "parameters": [
                    {
                        "description": "User account",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_MattBrs_OcelotMDM_internal_api_dto_user_dto.UpdateUserEnableStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_MattBrs_OcelotMDM_internal_api_dto_user_dto.UpdateUserEnableStatusRequest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_MattBrs_OcelotMDM_internal_api_dto_user_dto.UpdateUserEnableStatusResponseErr"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_MattBrs_OcelotMDM_internal_api_dto_user_dto.UpdateUserEnableStatusResponseErr"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_MattBrs_OcelotMDM_internal_api_dto_device_dto.DeviceCreationRequest": {
            "type": "object",
            "required": [
                "architecture",
                "otp",
                "type"
            ],
            "properties": {
                "architecture": {
                    "type": "string"
                },
                "otp": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "github_com_MattBrs_OcelotMDM_internal_api_dto_device_dto.DeviceCreationResponse": {
            "type": "object",
            "required": [
                "name",
                "ovpn_file"
            ],
            "properties": {
                "name": {
                    "description": "TODO: add needed client certificates and configurations in the response",
                    "type": "string"
                },
                "ovpn_file": {
                    "type": "string"
                }
            }
        },
        "github_com_MattBrs_OcelotMDM_internal_api_dto_device_dto.UpdateAddressRequest": {
            "type": "object",
            "required": [
                "ip_address",
                "name"
            ],
            "properties": {
                "ip_address": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "github_com_MattBrs_OcelotMDM_internal_api_dto_token_dto.NewTokenResponse": {
            "type": "object",
            "properties": {
                "expires_at": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "github_com_MattBrs_OcelotMDM_internal_api_dto_token_dto.NewTokenResponseErr": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "github_com_MattBrs_OcelotMDM_internal_api_dto_user_dto.CreateUserRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "github_com_MattBrs_OcelotMDM_internal_api_dto_user_dto.CreateUserResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "github_com_MattBrs_OcelotMDM_internal_api_dto_user_dto.LoginUserRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "github_com_MattBrs_OcelotMDM_internal_api_dto_user_dto.LoginUserResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "github_com_MattBrs_OcelotMDM_internal_api_dto_user_dto.UpdateUserEnableStatusRequest": {
            "type": "object",
            "required": [
                "enabled",
                "username"
            ],
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "github_com_MattBrs_OcelotMDM_internal_api_dto_user_dto.UpdateUserEnableStatusResponseErr": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "github_com_MattBrs_OcelotMDM_internal_domain_device.Device": {
            "type": "object",
            "properties": {
                "architecture": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ipaddress": {
                    "type": "string"
                },
                "lastSeen": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "supportedCommands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "JWT": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
